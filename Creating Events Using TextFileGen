This event construction allows you to have complete control over event generation, including being able to set 
linked parameters (such as opening angle).

First, need to create a HEP style event txt file. 

File has following structure:
'EVENT NUMBER' 'PARTICLES IN EVENT'
'STATUS CODE' 'PDG CODE' 'ENTRY OF FIRST MOTHER' 'ENTRY OF SECOND MOTHER' 'ENTRY OF FIRST DAUGHTER' 'ENTRY OF SECOND DAUGHTER' 'P_{x}' 'P_{y}' 'P_{z}' 'ENERGY (GeV)' 'MASS (GeV)' 'VERTEX X' 'VERTEX Y' 'VERTEX Z' 'TIME OF PRODUCTION'  
... Repeat for as many events as required ...

Notes:
- Always set status code to 1
- I always set 'ENTRY OF ...' to 0
- I always set 'TIME OF PRODUCTION' to 0.0
- Never miss a space or add one at the end (please check)
- Add as many instances of the second line as needed to decribe all particles in event

(I have created a python script to create this kind of HEP event file for events woth 1 or 2 particles (it is VERY VERY 
VERY much a work in progress) but can be found in the repository 'EventGeneration' on my GitHub account (username imawby)).

To create fully reconstructed events in larsoft:
1) Create the HEP file and save it under the filename 'MCParticleData.txt'.
2) Setup larsoft
3) To create the initial particles, run the command 
lar -c prodtext_dunefd_1x2x6.fcl MCParticleData.txt -n 'NUMBER OF EVENTS IN HEP FILE'
4) To propagate the particles through the detector volume, run the command
lar -c standard_g4_dune10kt_1x2x6.fcl textfile_gen.root -n 'NUMBER OF EVENTS IN HEP FILE'
5) To simulate the detector response, run the command 
lar -c standard_detsim_dune10kt_1x2x6.fcl textfile_gen_g4.root -n 'NUMBER OF EVENTS IN HEP FILE'
6) To reconstruct the event, run the command
lar -c standard_detsim_dune10kt_1x2x6.fcl textfile_gen_g4.root -n 'NUMBER OF EVENTS IN HEP FILE'

Notes:
- The file 'prodtext_dunefd_1x2x6.fcl' is found at the end of the bottom of this file
- Can call the HEP file something else, but you need to match it with line 8 of 'prodtext_dunefd_1x2x6.fcl'. 
- I think I ran into issues when I didn't include -n 'NUMBER OF EVENTS IN HEP FILE'
- Sometimes there is an error 'no sim channel found' which occurs at stage 6 
(I think this happens when particle leaves the detector, or is created outside the detector, i'm not sure, 
but all events will be reconstructed up to the event that went wrong)

Good luck!

More information found at https://nusoft.fnal.gov/larsoft/doxsvn/html/classevgen_1_1TextFileGen.html

////////////////////////////////////////////////////////////////////////////////////
prodtext_dunefd_1x2x6.fcl
////////////////////////////////////////////////////////////////////////////////////
#include "services_dune.fcl"

BEGIN_PROLOG

standard_isobeltextfilegen: 
{
  module_type: "TextFileGen"
  InputFileName: "MCParticleData.txt"
}

END_PROLOG

process_name: IsobelProdText

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "single_hist.root" }
  TimeTracker:       {}
  RandomNumberGenerator: {} #ART native random number generator
                @table::dunefd_simulation_services
}

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   10          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::standard_isobeltextfilegen
   rns:       { module_type: "RandomNumberSaver" }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [generator, rns ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "textfile_gen.root"
 }
}

services.Geometry: @local::dune10kt_1x2x6_geo #GEOMETRY

